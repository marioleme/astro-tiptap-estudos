<div class="editor-area">
    <div id="editor-container">

    </div>
</div>
<script>
    import { Editor } from '@tiptap/core'
    import StarterKit from '@tiptap/starter-kit'
    import Image from '@tiptap/extension-image'
    import { getNoteId} from "../functions/notes"
    import { updateNotesList } from "../functions/notes"



    const noteId = getNoteId()
    const storageKey = `note-${noteId}`

    new Editor({
        element: document.querySelector('#editor-container')!,
        extensions: [
            StarterKit,
            Image.configure({
                allowBase64: true,
                inline: true,
                HTMLAttributes: {
                    class: 'img-fluid'
                }
            })
        ],
        content: localStorage.getItem(storageKey) || `
        <h1>Nova Nota!</h1>
       
        `,
        autofocus: true,
        onUpdate({ editor }) {
            console.log(editor.getHTML())
            firstLineIsH1(editor)
            const content = editor.getHTML()
            localStorage.setItem(storageKey, content) 
            //salva o conteudo em memória do navegador para não perder quando recarregar a página, mas não é seguro, pois pode ser que o usuário perca o conteudo se o usuário fechar o navegador   
            updateNotesList()

        },
    })

    function firstLineIsH1(editor : Editor) {
        const json = editor.getJSON()

        if (json.content && json.content.length > 0 && json.content[0].type !== 'heading' ) {
            editor.commands.setNodeSelection(0)
            editor.commands.toggleHeading({ level: 1 })
      
        }

    }
    updateNotesList()
    
</script>
<style>
    .editor-area {
        flex: 1;
        display: flex;
        flex-direction: column;
        overflow-y: hidden;
        background-color: color-mix(in srgb, var(--color-primary) 15%, var(--color-bg) 100%);
    }
    #editor-container {
        flex: 1;
        padding: 0 15vw;
   
    }
    :global(.ProseMirror){
        outline: none;
        min-height: 200px;
    }
    :global(.ProseMirror p){
        margin: 0.5em 0;
    }
    :global(.ProseMirror h1, .ProseMirror h2,.ProseMirror h3,.ProseMirror h4,.ProseMirror h5,.ProseMirror h6){
        margin: 0.5em 0;
    }
    :global(.ProseMirror ul , .ProseMirror ol){
        margin-left:  1em 0 0.5em ;
    }
    :global(.ProseMirror blockquote){
        border-left: 3px solid var(--border-color);
        padding-left: 1em;
        margin-left: 0;
        margin-right: 0;
    }
    :global(.ProseMirror hr){
        border-color: var(--border-color);
        
    }
    :global(.ProseMirror img){
        max-width: 100%;
        height: auto;
    }
</style>